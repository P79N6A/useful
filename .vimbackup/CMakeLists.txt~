

project(lidar_cam_calib)

add_subdirectory(proto)

set (CMAKE_CXX_STANDARD 11)
# set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++11 -O3")


set(SRCS
    # ./corners.cpp
    # ./find_rt.cpp
    ./image_process.cpp
    # ./point_cloud_process.cpp
    ./utils.cpp
    ./cube_edge.cpp
)

set(HRCS
    # ./corners.h
    # ./find_rt.h
    ./image_process.h
    # ./point_cloud_process.h
    ./utils.h
    # ./connected_components.h
    ./cube_edge.h
    # ./pcl_point_types.h
)

set_directory_properties( PROPERTIES COMPILE_DEFINITIONS "" )

find_package(CUDA 8.0)


if(CUDA_FOUND)
    message("CUDA found")
    include_directories(SYSTEM ${CUDA_INCLUDE_DIRS})
    list(APPEND CUDA_NVCC_FLAGS "-std=c++11")
    #set(CUDA_PROPAGATE_HOST_FLAGS OFF)
    #set(CUDA_VERBOSE_BUILD ON)  # uncomment to debug
    # reduce scope of arch to suppress warning regarding to sm_20
    list(APPEND CUDA_NVCC_FLAGS "-gencode arch=compute_61,code=sm_61") # GTX 1080
    # list(APPEND CUDA_NVCC_FLAGS "-gencode arch=compute_52,code=sm_52") # GTX 970
    # list(APPEND CUDA_NVCC_FLAGS "-gencode arch=compute_50,code=sm_50") # GTX 960
endif()

cuda_add_library(opt_cuda greed_search_reduce.cu)

set(CUDA_USE_STATIC_CUDA_RUNTIME OFF)

# find_package(aruco REQUIRED)

add_executable(lidar_camera_3d23d_optimize  ${SRCS} ${HRCS} optimize_main_multi_frame.cpp)
target_link_libraries(lidar_camera_3d23d_optimize 
                      glog 
                      ${OpenCV_LIBS} 
                      ${PCL_LIBRARIES} 
                      calib_param_proto 
                      perception_common
                      opt_cuda
                      aruco
                      )


add_executable(lidar_camera_3d23d_viewer  ${SRCS} ${HRCS} viewer_main.cpp)
target_link_libraries(lidar_camera_3d23d_viewer 
                      glog 
                      ${OpenCV_LIBS} 
                      ${PCL_LIBRARIES} 
                      # ${CSPARSE_LIBRARY}
                      calib_param_proto 
                      perception_common
                      aruco
                      # nlopt
                      )

add_executable(lidar_camera_3d23d_project  ${SRCS} ${HRCS} project_pcl.cpp)
target_link_libraries(lidar_camera_3d23d_viewer 
                      glog 
                      ${OpenCV_LIBS} 
                      ${PCL_LIBRARIES} 
                      # ${CSPARSE_LIBRARY}
                      calib_param_proto 
                      perception_common
                      aruco
                      # nlopt
                      )

add_executable(cube_edge_test ${SRCS} ${HRCS} cube_edge_test.cpp)
target_link_libraries(cube_edge_test 
                      # glog
                      ${OpenCV_LIBS} 
                      ${PCL_LIBRARIES} 
                      # ${CSPARSE_LIBRARY}
                      calib_param_proto 
                      perception_common
                      # nlopt
                      aruco
                      )


# add_executable(lidar_camera_3d23d_bechmark ${SRCS} ${HRCS} benchmark_main.cpp)
# target_link_libraries(lidar_camera_3d23d_bechmark
#                       # glog
#                       ${OpenCV_LIBS}
#                       ${PCL_LIBRARIES}
#                       # ${CSPARSE_LIBRARY}
#                       calib_param_proto
#                       perception_common
#                       # nlopt
#                       aruco
#                       )

install(TARGETS lidar_camera_3d23d_optimize
  RUNTIME DESTINATION bin
  LIBRARY DESTINATION lib
  ARCHIVE DESTINATION lib
)

install(TARGETS lidar_camera_3d23d_viewer
  RUNTIME DESTINATION bin
  LIBRARY DESTINATION lib
  ARCHIVE DESTINATION lib
)

install(TARGETS lidar_camera_3d23d_project
  RUNTIME DESTINATION bin
  LIBRARY DESTINATION lib
  ARCHIVE DESTINATION lib
)


install(TARGETS cube_edge_test
  RUNTIME DESTINATION bin
  LIBRARY DESTINATION lib
  ARCHIVE DESTINATION lib
)

# install(TARGETS lidar_camera_3d23d_bechmark
#   RUNTIME DESTINATION bin
#   LIBRARY DESTINATION lib
#   ARCHIVE DESTINATION lib
# )



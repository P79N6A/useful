/* Copyright (C) Alibaba-inc - All Rights Reserved
 * Unauthorized copying of this file, via any medium is strictly prohibited
 * Author: wangbing <fengquan.wb@alibaba-inc.com>
 *         shuo     <shuo@alibaba-inc.com>
 */


#ifndef UTILS_PCL_POINT_TYPES
#define UTILS_PCL_POINT_TYPES

#define PCL_NO_PRECOMPILE

#include <pcl/point_cloud.h>
#include <pcl/point_types.h>

namespace hadutils
{
    struct PCLVelodyne
    {
        PCLVelodyne(float x_, float y_, float z_, float intensity_)
            : x(x_),
              y(y_),
              z(z_),
              intensity(intensity_)
        {}

        PCLVelodyne(){}

        PCL_ADD_POINT4D;                  // preferred way of adding a XYZ+padding
        float distance;
        float intensity;
        int ring;
        int32_t mdegree;                  // horizontal degree: 1000 mdegree = 1Â°
        EIGEN_MAKE_ALIGNED_OPERATOR_NEW   // make sure our new allocators are aligned
    } EIGEN_ALIGN16;                      // enforce SSE padding for correct memory alignment

    struct structure_point
    {
        PCL_ADD_POINT4D;
        float x_in_sensor;
        float y_in_sensor;
        float z_in_sensor;
        float range2D;
        uint16_t ring;

        int serial_in_cloud;
        double ground_probability;
        double EstimatedGnd_height;
        double height2EsimatedGnd;
        int semantic_label;
        uint8_t is_valid;

        //context information
        int context_trackID;
        double context_distance2track;

        EIGEN_MAKE_ALIGNED_OPERATOR_NEW
    }EIGEN_ALIGN16;

}

POINT_CLOUD_REGISTER_POINT_STRUCT (hadutils::PCLVelodyne,
                                   (float, x, x)
                                   (float, y, y)
                                   (float, z, z)
                                   (float, distance, distance)
                                   (float, intensity, intensity)
                                   (int, ring, ring)
)

POINT_CLOUD_REGISTER_POINT_STRUCT (hadutils::structure_point,           // here we assume a XYZ + "test" (as fields)
                                   (float, 	x, 	x)
                                   (float, 	y, 	y)
                                   (float,	z, 	z)
                                   (float,      x_in_sensor, x_in_sensor)
                                   (float,      y_in_sensor, y_in_sensor)
                                   (float,      z_in_sensor, z_in_sensor)
                                   (uint16_t,   ring,   ring)
                                   (int,        serial_in_cloud, serial_in_cloud)
                                   (double,     ground_probability, ground_probability)
                                   (double,     EstimatedGnd_height, EstimatedGnd_height)
                                   (double,     height2EsimatedGnd, height2EsimatedGnd)
                                   (int,        semantic_label,     semantic_label)
                                   (uint8_t,       is_valid,     is_valid)
                                   (int,        context_trackID, context_trackID)
                                   (double,     context_distance2track, context_distance2track)
)

#endif


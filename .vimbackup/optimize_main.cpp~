/***************************************************************************
 *
 * Copyright (c) 2018 Alibaba-inc.com, Inc. All Rights Reserved
 * $Id$
 *
 **************************************************************************/
/**
 * @file calib_main.cpp
 * @author Weijian Sun(weijian.swj@alibaba-inc.com)
 * @author lifangzhen(fangzhen.lfz@alibaba-inc.com)
 **/

#include <iostream>
#include <sstream>
#include <fstream>
#include <Eigen/Eigen>
#include <Eigen/LU>
#include <google/protobuf/text_format.h>
#include <google/protobuf/io/zero_copy_stream_impl.h>

#include <pcl/io/pcd_io.h>

#include "lidar_cam_calib/proto/calib_param.pb.h"
#include "lidar_cam_calib/image_process.h"
#include "lidar_cam_calib/utils.h"
#include "common/common.h"

#define USING_OPENMP

// static std::map<std::string,std::vector<float>> data_map;
// template <typename T>
// class Test {
// public:
//     static T get(const LidarCameraCalibParam& param);
//     static void set(const LidarCameraCalibParam& param, std::vector<float>& data);
//     static std::function<T, (const LidarCameraCalibParam&)> get_fun(std::string channel);
// };
//
// class InitMap {
// public:
//     static std::vector<float> get(const std::string& channel) {
//         auto& reg = registry();
//         return reg[channel];
//     }
// private:
//     friend template <typename T> class Test;
//     static void register_data(std::string channel, const std::vector<float>& data) {
//         auto& reg = registry();
//         reg[channel] = data;
//     }
//
//     static std::map<std::string, std::vector<float> >& registry() {
//         static std::map<std::string, std::vector<float> > init_xyz_rt_map;
//         return init_xyz_rt_map;
//     }
// };
//
// #define REGISTER(name, cap)      \
//     namespace traits {              \
//     struct name {                    \
//         typedef type cap##InitXyzRt; \
//     };         \
//     } \
//     template<>                         \
//     class Test<traits::name::type> {             \
//     public:         \
//         static traits::name::type get(const LidarCameraCalibParam& param) {  \
//             return param.name##_init_xyz_rt(); \
//         }   \
//         static void set(const LidarCameraCalibParam& param, std::vector<float>& data) { \
//             auto init_xyz_rt = get(param); \
//             data.resize(6);                 \
//             data[0] = init_xyz_rt.initial_x_rot(); \
//             data[1] = init_xyz_rt.initial_y_rot(); \
//             data[2] = init_xyz_rt.initial_z_rot(); \
//             data[3] = init_xyz_rt.initial_x(); \
//             data[4] = init_xyz_rt.initial_y(); \
//             data[5] = init_xyz_rt.initial_z(); \
//         }   \
//     }
//
// REGISTER(f0, F0);
// REGISTER(b0, B0);
// REGISTER(l0, L0);
// REGISTER(r0, R0);
// REGISTER(r0, R1);
// REGISTER(l1, L1);
// REGISTER(tl, TL);


using hadutils::PCLVelodyne;

void load_text_proto_message_file(const std::string& path,
                                  google::protobuf::Message& msg) {
    int fd = open(path.c_str(), O_RDONLY);
    PCHECK(fd >= 0) << "path[" << path << "]";
    google::protobuf::io::FileInputStream file_in(fd);
    CHECK(google::protobuf::TextFormat::Parse(&file_in, &msg)) << "path[" << path << "]";
    PCHECK(0 == close(fd));
}

//------------- point cloud utils ---------------//
pcl::PointCloud<pcl::PointXYZ>::Ptr toPointsXYZ(const pcl::PointCloud<hadutils::PCLVelodyne>::Ptr cloud) {
    pcl::PointCloud<pcl::PointXYZ>::Ptr new_cloud(new pcl::PointCloud<pcl::PointXYZ>());
    for (auto pt = cloud->points.begin(); pt < cloud->points.end(); pt++) {
        new_cloud->push_back(pcl::PointXYZ(pt->x, pt->y, pt->z));
    }
    return new_cloud;
}


void set_xyz_rt(calib::LidarCameraCalibParam param, float & init_x_rot, float & init_y_rot, float & init_z_rot, float & init_x_tran, float & init_y_tran, float & init_z_tran)
{
    std::string channel = param.common_param().channel();
    if(channel == "F0")
    {
        auto xyz_rt = param.f0_init_xyz_rt();
        init_x_rot = xyz_rt.initial_x_rot(), init_y_rot = xyz_rt.initial_y_rot(), init_z_rot = xyz_rt.initial_z_rot(), init_x_tran = xyz_rt.initial_x(), init_y_tran = xyz_rt.initial_y(), init_z_tran = xyz_rt.initial_z();
    }
    if(channel == "B0")
    {
        auto xyz_rt = param.b0_init_xyz_rt();
        init_x_rot = xyz_rt.initial_x_rot(), init_y_rot = xyz_rt.initial_y_rot(), init_z_rot = xyz_rt.initial_z_rot(), init_x_tran = xyz_rt.initial_x(), init_y_tran = xyz_rt.initial_y(), init_z_tran = xyz_rt.initial_z();
    }
    if(channel == "L0")
    {
        auto xyz_rt = param.l0_init_xyz_rt();
        init_x_rot = xyz_rt.initial_x_rot(), init_y_rot = xyz_rt.initial_y_rot(), init_z_rot = xyz_rt.initial_z_rot(), init_x_tran = xyz_rt.initial_x(), init_y_tran = xyz_rt.initial_y(), init_z_tran = xyz_rt.initial_z();
    }
    if(channel == "TL")
    {
        auto xyz_rt = param.tl_init_xyz_rt();
        init_x_rot = xyz_rt.initial_x_rot(), init_y_rot = xyz_rt.initial_y_rot(), init_z_rot = xyz_rt.initial_z_rot(), init_x_tran = xyz_rt.initial_x(), init_y_tran = xyz_rt.initial_y(), init_z_tran = xyz_rt.initial_z();
    }
    if(channel == "R0")
    {
        auto xyz_rt = param.r0_init_xyz_rt();
        init_x_rot = xyz_rt.initial_x_rot(), init_y_rot = xyz_rt.initial_y_rot(), init_z_rot = xyz_rt.initial_z_rot(), init_x_tran = xyz_rt.initial_x(), init_y_tran = xyz_rt.initial_y(), init_z_tran = xyz_rt.initial_z();
    }
    if(channel == "R1")
    {
        auto xyz_rt = param.r1_init_xyz_rt();
        init_x_rot = xyz_rt.initial_x_rot(), init_y_rot = xyz_rt.initial_y_rot(), init_z_rot = xyz_rt.initial_z_rot(), init_x_tran = xyz_rt.initial_x(), init_y_tran = xyz_rt.initial_y(), init_z_tran = xyz_rt.initial_z();
    }
    if(channel == "L1")
    {
        auto xyz_rt = param.l1_init_xyz_rt();
        init_x_rot = xyz_rt.initial_x_rot(), init_y_rot = xyz_rt.initial_y_rot(), init_z_rot = xyz_rt.initial_z_rot(), init_x_tran = xyz_rt.initial_x(), init_y_tran = xyz_rt.initial_y(), init_z_tran = xyz_rt.initial_z();
    }
}

void set_xyz_rang(bool using_high, calib::LidarCameraCalibParam param, float & x_rot_range, float & y_rot_range, float & z_rot_range, float & x_tran_range,float &  y_tran_range, float & z_tran_range, float & rot_step, float & tran_step)
{

    if(using_high)
    {
        auto xyz_rang = param.search_high_pre();
        x_rot_range = xyz_rang.search_x_r();
        y_rot_range = xyz_rang.search_y_r();
        z_rot_range = xyz_rang.search_z_r();
        x_tran_range = xyz_rang.search_x();
        y_tran_range = xyz_rang.search_y();
        z_tran_range = xyz_rang.search_z();
        rot_step = xyz_rang.step_r();
        tran_step = xyz_rang.step_t();
    }
    else
    {
        auto xyz_rang = param.search_low_pre();
        x_rot_range = xyz_rang.search_x_r();
        y_rot_range = xyz_rang.search_y_r();
        z_rot_range = xyz_rang.search_z_r();
        x_tran_range = xyz_rang.search_x();
        y_tran_range = xyz_rang.search_y();
        z_tran_range = xyz_rang.search_z();
        rot_step = xyz_rang.step_r();
        tran_step = xyz_rang.step_t();
    }
}

void read_pair(std::string pair_file, std::string pcd_dir, std::img_dir,
        std::vector<std::string>& pcd_file, std::vector<std::string>& img_file){

    std::ifstream infile;
    infile.open(pair_file);
    std::string line;
    while (getline(infile, line)){
        std::string fpcd;
        std::string fimg;
        std::stringstream oss;
        oss << line;
        oss >> fimg >> fpcd;
        pcd_files.push_back(pcd_dir + fpcd);
        img_files.push_back(img_dir + fimg);
    }
}

void load_pcd_data(std::vector<string> pcd_files, std::vector<float> &pc_data,
        std::vector<int> &nr_pc){

    for(auto pcd_file : pcd_files){
        pcl::PointCloud<PCLVelodyne>::Ptr cloud(new pcl::PointCloud<PCLVelodyne>);
        pcl::io::loadPCDFile(pcd_file, *cloud);
        nr_pc.push_back(cloud->size());
        for(auto p : cloud->points){
            pc_data.push_back(p.x);
            pc_data.push_back(p.y);
            pc_data.push_back(p.z);
        }
    }
}

void load_img_data(std::vector<string> img_files, std::vector<unsigned char> & img_data,
        std::vector<int> &width, std::vector<int> &height, calib::ImageProcess image_process){

    for(auto img_file : img_files){
        cv::Mat img = cv::imread(img_file);
        cv::Mat idt_img = cv::Mat(img.size(), CV_8UC1);
        image_process.edge_filter(img, &idt_img);
        std::vector<cv::Mat> rgb_idt_channels;
        rgb_idt_channels.push_back(cv::Mat::zeros(idt_img.size(), CV_8UC1));
        rgb_idt_channels.push_back(cv::Mat::zeros(idt_img.size(), CV_8UC1));
        rgb_idt_channels.push_back(idt_img);
        cv::Mat rgb_idt_img;
        cv::merge(rgb_idt_channels, rgb_idt_img);

        width.push_back(idt_img.cols);
        height.push_back(idt_img.rows);
        for(int r = 0; r < idt_img.rows; r++)
        for(int c = 0; c < idt_img.cols; c++)
        img_data.push_back(idt_img.at<unsigned char>(r, c);
    }
}

// f0:
// rot seq: z_rot_yaw(90) -> y_rot_roll(0) -> x_rot_pitch(90)
// x_rot -> pitch
// y_rot -> roll
// z_rot -> yaw

int main(int argc, char** argv) {

    std::string params_file = argv[1];
    std::cout << "params_file: " << params_file << std::endl;

    calib::LidarCameraCalibParam lidar_camera_calib_param;
    load_text_proto_message_file(params_file, lidar_camera_calib_param);

    auto param_commom = lidar_camera_calib_param.common_param();
    auto param_range = lidar_camera_calib_param.search_low_pre();

    float init_x_rot, init_y_rot, init_z_rot, init_x_tran, init_y_tran, init_z_tran;
    set_xyz_rt(lidar_camera_calib_param, init_x_rot, init_y_rot, init_z_rot, init_x_tran, init_y_tran, init_z_tran);
    float x_rot_range, y_rot_range, z_rot_range, x_tran_range, y_tran_range, z_tran_range, rot_step, tran_step;
    set_xyz_rang(false, lidar_camera_calib_param, x_rot_range, y_rot_range, z_rot_range, x_tran_range, y_tran_range, z_tran_range, rot_step, tran_step);


    int device_num = param_commom.device_num();
    bool show_project = param_commom.show_project();

    std::string pcd_file = param_commom.data_prefix() + "_" + param_commom.channel() + param_commom.pcd_gd_search_file_ext();
    std::string img_file = param_commom.data_prefix() + "_" + param_commom.channel() + param_commom.img_file_ext();

    std::cout<<"pcd_file path:  "<<pcd_file<<std::endl;
    std::cout<<"img file path:  "<<img_file<<std::endl;

    PERF_BLOCK_START();

    Eigen::Quaterniond qlidarToCamera;
    qlidarToCamera = Eigen::AngleAxisd(init_x_rot * M_PI / 180., Eigen::Vector3d::UnitX()) *
                     Eigen::AngleAxisd(init_y_rot * M_PI / 180., Eigen::Vector3d::UnitY()) *
                     Eigen::AngleAxisd(init_z_rot * M_PI / 180., Eigen::Vector3d::UnitZ());

    Eigen::Matrix3d inital_lidarToCamera = qlidarToCamera.matrix();
    Eigen::Matrix4d inital_lidarToCamera_transmatrix = Eigen::Matrix4d::Identity();
    inital_lidarToCamera_transmatrix.topLeftCorner(3, 3) = inital_lidarToCamera;
    inital_lidarToCamera_transmatrix(0, 3) = init_x_tran;
    inital_lidarToCamera_transmatrix(1, 3) = init_y_tran;
    inital_lidarToCamera_transmatrix(2, 3) = init_z_tran;

    Eigen::Matrix4d lid2cam = inital_lidarToCamera_transmatrix; //.inverse();

    PERF_BLOCK_END("calib_test");

    std::cout << "inital_lidarToCamera_transmatrix = " <<std::endl;
    std::cout << inital_lidarToCamera_transmatrix << std::endl;


    calib::ImageProcess image_process;
    image_process.Init(lidar_camera_calib_param);

//// load pcl&img file path
    read_pair(std::string pair_file, std::string pcd_dir, std::img_dir,
        std::vector<std::string>& pcd_file, std::vector<std::string>& img_file)

//// load camera matrix
    cv::Mat camera_projection_matrix = image_process.get_camera_projection_matrix();

//// project point cloud
    transform<hadutils::PCLVelodyne>(lid2cam, ori_cloud);
    pcl::PointCloud<pcl::PointXYZ>::Ptr ori_t_cloud = toPointsXYZ(ori_cloud);
    cv::Mat show_ori_t_img = project<pcl::PointXYZ>(camera_projection_matrix, ori_t_cloud, rgb_idt_img, 0, 0, 0);

//// show init projection
    if(show_project){
        std::cout<<"&&&&&&&&&&&&&&&&&&&&&&&&&&&"<<std::endl;
        cv::namedWindow("init_position", cv::WINDOW_NORMAL);
        cv::imshow("init_position", show_ori_t_img);
        cv::waitKey(0);
    }
    else
    cv::imwrite("init_position.png", show_ori_t_img);

//// init cuda xyz_rot_trans
    Eigen::Matrix3d init_rot = lid2cam.topLeftCorner(3, 3);
    Eigen::Vector3d init_xyz_rot= init_rot.eulerAngles(0, 1, 2);
    Eigen::Vector3d init_xyz_tran = lid2cam.col(3).head(3);
    float init_xyz_rot_trans[6] = {init_xyz_rot(0) / M_PI * 180.0,
                                   init_xyz_rot(1) / M_PI * 180.0,
                                   init_xyz_rot(2) / M_PI * 180.0,
                                   init_xyz_tran(0), init_xyz_tran(1), init_xyz_tran(2)};
    printf("init_xyz_rot_trans:\n");
    printf(" %f, %f, %f, %f, %f, %f\n", init_xyz_rot_trans[0], init_xyz_rot_trans[1], init_xyz_rot_trans[2],
            init_xyz_rot_trans[3], init_xyz_rot_trans[4], init_xyz_rot_trans[5]);

//// init cuda img data
    std::vector<unsigned char> img_data;
    std::vector<int> width, height;
    load_img_data(std::vector<string> img_files, std::vector<unsigned char> & img_data,
        std::vector<int> &width, std::vector<int> &height, calib::ImageProcess image_process)

//// init cuda pcd data
    std::vector<float> pc_data;
    std::vector<int> nr_pc
    load_pcd_data(std::vector<string> pcd_files, std::vector<float> &pc_data,
        std::vector<int> &nr_pc)


//// init cuda cam proj mat
    float pm[9] = {camera_projection_matrix.at<float>(0, 0), camera_projection_matrix.at<float>(0, 1),
                   camera_projection_matrix.at<float>(0, 2), camera_projection_matrix.at<float>(1, 0),
                   camera_projection_matrix.at<float>(1, 1), camera_projection_matrix.at<float>(1, 2),
                   camera_projection_matrix.at<float>(2, 0), camera_projection_matrix.at<float>(2, 1),
                   camera_projection_matrix.at<float>(2, 2)};

    printf("cam_pm:\n");
    printf("%f, %f, %f,\n%f, %f, %f,\n%f, %f, %f\n", pm[0], pm[1], pm[2],
            pm[3], pm[4], pm[5], pm[6], pm[7], pm[8]);

//// init cuda search range data
    float search_xyz_rot_trans[6] = {x_rot_range,
                                     y_rot_range,
                                     z_rot_range,
                                     x_tran_range,
                                     y_tran_range,
                                     z_tran_range};

    printf("search_xyz_rot_trans:\n");
    printf("%f, %f, %f, %f, %f, %f\n", search_xyz_rot_trans[0], search_xyz_rot_trans[1], search_xyz_rot_trans[2],
            search_xyz_rot_trans[3], search_xyz_rot_trans[4], search_xyz_rot_trans[5]);

//// init cuda search step data
    float step_rt[2] = {rot_step,
                        tran_step};
    printf("step_rt:\n");
    printf("%f, %f\n", step_rt[0], step_rt[1]);

//// init placeholder for best xyz_rot_trans
    float best_xyz_rot_trans[6];

//// apply cuda search
    PERF_BLOCK_END("calib_data_process");
    greed_search_cu(device_num, img_data.data(), width, height, pc_data.data(), nr_pc, pm, init_xyz_rot_trans,
            search_xyz_rot_trans, step_rt, best_xyz_rot_trans);

////check weight count
    {
        double xyz_rot[3] = {best_xyz_rot_trans[0], best_xyz_rot_trans[1], best_xyz_rot_trans[2]};
        double xyz_trans[3] = {best_xyz_rot_trans[3], best_xyz_rot_trans[4], best_xyz_rot_trans[5]};

        int temp_count = edge_weight_count<PCLVelodyne>(idt_img, cloud, camera_projection_matrix, xyz_rot, xyz_trans);
        std::cout<<std::endl;
        std::cout<<"*************************"<<std::endl;
        std::cout<<"final weight_count: "<<temp_count<<std::endl;


        PERF_BLOCK_END("calib_greed_search");

        std::cout << "refined rot:   " << best_xyz_rot_trans[0] * 180. / M_PI << ", "
                                     << best_xyz_rot_trans[1] * 180. / M_PI << ", "
                                     << best_xyz_rot_trans[2] * 180. / M_PI << std::endl;
        std::cout << "refined trans: " << best_xyz_rot_trans[3] << ", " << best_xyz_rot_trans[4] << ", " << best_xyz_rot_trans[5] << std::endl;
    }



    Eigen::Quaterniond q;
    q = Eigen::AngleAxisd(best_xyz_rot_trans[0], Eigen::Vector3d::UnitX()) *
        Eigen::AngleAxisd(best_xyz_rot_trans[1], Eigen::Vector3d::UnitY()) *
        Eigen::AngleAxisd(best_xyz_rot_trans[2], Eigen::Vector3d::UnitZ());
    lid2cam.topLeftCorner(3, 3) = q.matrix();
    lid2cam(0, 3) = best_xyz_rot_trans[3];
    lid2cam(1, 3) = best_xyz_rot_trans[4];
    lid2cam(2, 3) = best_xyz_rot_trans[5];


    std::cout<<"final lid2cam: "<<std::endl;
    std::cout<<lid2cam<<std::endl;
    std::cout<<"&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&"<<std::endl;
    std::cout<<"final cam2lid: "<<std::endl;

    {
        Eigen::Matrix4d cam2lid = lid2cam.inverse();
        Eigen::Matrix3d rot = cam2lid.topLeftCorner(3, 3);
        Eigen::Vector3d xyz_rot = rot.eulerAngles(2, 1, 0);
        Eigen::Vector3d xyz = cam2lid.col(3).head(3);
        std::cout << "final xyz_rot: " << xyz_rot.reverse() * 180.0 / M_PI<< std::endl;
        std::cout << "final xyz: " << xyz << std::endl;
    }


    // Eigen::Matrix4d cam2lid = lid2cam.inverse();
    // Eigen::Matrix3d final_rot = cam2lid.topLeftCorner(3, 3);
    // Eigen::Vector3d final_xyz_rot= final_rot.eulerAngles(0, 1, 2);
    // Eigen::Vector3d final_xyz_tran = cam2lid.col(3).head(3);
    // std::cout<<"rot: "<<std::endl;
    // std::cout<<final_xyz_rot.transpose()<<std::endl;
    // std::cout<<"trans: "<<std::endl;
    // std::cout<<final_xyz_tran.transpose()<<std::endl;

    transform<hadutils::PCLVelodyne>(lid2cam, cloud);
    pcl::PointCloud<pcl::PointXYZ>::Ptr t_cloud = toPointsXYZ(cloud);
    cv::Mat show_t_img = project<pcl::PointXYZ>(camera_projection_matrix, t_cloud, rgb_idt_img, 0, 0, 0);

    if(show_project){
        cv::namedWindow("t_cloud", cv::WINDOW_NORMAL);
        cv::imshow("t_cloud", show_t_img);
        cv::waitKey(0);
    }
    cv::imwrite("t_cloud.png", show_t_img);




    std::cout<<std::endl;
    std::cout<<std::endl;
    std::cout<<std::endl;
    std::cout<<"********************************   high pre calib *****************************"<<std::endl;
    std::cout<<std::endl;
    std::cout<<std::endl;
    std::cout<<std::endl;

//// load pcl
    std::string pcd_line_file = param_commom.data_prefix() + "_" + param_commom.channel() + param_commom.pcd_line_file_ext();
    std::cout<<"pcd_line_file path:  "<<pcd_file<<std::endl;
    std::cout<<"img file path:  "<<img_file<<std::endl;
    pcl::PointCloud<PCLVelodyne>::Ptr line_cloud(new pcl::PointCloud<PCLVelodyne>);
    pcl::io::loadPCDFile(pcd_line_file, *line_cloud);

//// init cuda pcd data
    std::vector<float> pc_line_data;
    int nr_line_pc = line_cloud->size();
    std::cout << "out_nr_pc: " << nr_line_pc << '\n';
    pc_line_data.resize(nr_line_pc * 3);
    for (size_t i = 0; i < nr_line_pc; ++i) {
        pc_line_data[i * 3] = line_cloud->points[i].x;
        pc_line_data[i * 3 + 1] = line_cloud->points[i].y;
        pc_line_data[i * 3 + 2] = line_cloud->points[i].z;
    }


//// update init rt
    float line_init_xyz_rot_trans[6] = {best_xyz_rot_trans[0] * 180. / M_PI,
                                        best_xyz_rot_trans[1] * 180. / M_PI,
                                        best_xyz_rot_trans[2] * 180. / M_PI,
                                        best_xyz_rot_trans[3], best_xyz_rot_trans[4], best_xyz_rot_trans[5]};
    printf("updated init_xyz_rot_trans:\n");
    printf(" %f, %f, %f, %f, %f, %f\n", line_init_xyz_rot_trans[0], line_init_xyz_rot_trans[1], line_init_xyz_rot_trans[2],
                                        line_init_xyz_rot_trans[3], line_init_xyz_rot_trans[4], line_init_xyz_rot_trans[5]);


//// update cuda search range data
    set_xyz_rang(true, lidar_camera_calib_param, x_rot_range, y_rot_range, z_rot_range,
            x_tran_range, y_tran_range, z_tran_range, rot_step, tran_step);
    float highpre_search_xyz_rot_trans[6] = {x_rot_range,
                                 y_rot_range,
                                 z_rot_range,
                                 x_tran_range,
                                 y_tran_range,
                                 z_tran_range};

    printf("updated search_xyz_rot_trans:\n");
    printf("%f, %f, %f, %f, %f, %f\n", highpre_search_xyz_rot_trans[0], highpre_search_xyz_rot_trans[1], highpre_search_xyz_rot_trans[2],
                                        highpre_search_xyz_rot_trans[3], highpre_search_xyz_rot_trans[4], highpre_search_xyz_rot_trans[5]);

//// init cuda search step data
    float highpre_step_rt[2] = {rot_step,
                    tran_step};
    printf("updated step_rt:\n");
    printf("%f, %f\n", highpre_step_rt[0], highpre_step_rt[1]);


    greed_search_cu(device_num, img_data.data(), width, height, pc_line_data.data(), nr_line_pc, pm, line_init_xyz_rot_trans,
            highpre_search_xyz_rot_trans, highpre_step_rt, best_xyz_rot_trans);

////check weight count
    {
        double xyz_rot[3] = {best_xyz_rot_trans[0], best_xyz_rot_trans[1], best_xyz_rot_trans[2]};
        double xyz_trans[3] = {best_xyz_rot_trans[3], best_xyz_rot_trans[4], best_xyz_rot_trans[5]};

        int temp_count = edge_weight_count<PCLVelodyne>(idt_img, line_cloud, camera_projection_matrix, xyz_rot, xyz_trans);
        std::cout<<std::endl;
        std::cout<<"*************************"<<std::endl;
        std::cout<<"updated final weight_count: "<<temp_count<<std::endl;


        std::cout << "refined rot:   " << best_xyz_rot_trans[0] * 180. / M_PI << ", "
                                     << best_xyz_rot_trans[1] * 180. / M_PI << ", "
                                     << best_xyz_rot_trans[2] * 180. / M_PI << std::endl;
        std::cout << "refined trans: " << best_xyz_rot_trans[3] << ", " << best_xyz_rot_trans[4] << ", " << best_xyz_rot_trans[5] << std::endl;
    }


    q = Eigen::AngleAxisd(best_xyz_rot_trans[0], Eigen::Vector3d::UnitX()) *
        Eigen::AngleAxisd(best_xyz_rot_trans[1], Eigen::Vector3d::UnitY()) *
        Eigen::AngleAxisd(best_xyz_rot_trans[2], Eigen::Vector3d::UnitZ());
    lid2cam.topLeftCorner(3, 3) = q.matrix();
    lid2cam(0, 3) = best_xyz_rot_trans[3];
    lid2cam(1, 3) = best_xyz_rot_trans[4];
    lid2cam(2, 3) = best_xyz_rot_trans[5];


    std::cout<<"final lid2cam: "<<std::endl;
    std::cout<<lid2cam<<std::endl;
    std::cout<<"&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&"<<std::endl;
    std::cout<<"final cam2lid: "<<std::endl;

    {
        Eigen::Matrix4d cam2lid = lid2cam.inverse();
        Eigen::Matrix3d rot = cam2lid.topLeftCorner(3, 3);
        Eigen::Vector3d xyz_rot = rot.eulerAngles(2, 1, 0);
        Eigen::Vector3d xyz = cam2lid.col(3).head(3);
        std::cout << "final xyz_rot: " << xyz_rot.reverse() * 180.0 / M_PI<< std::endl;
        std::cout << "final xyz: " << xyz << std::endl;
    }


    transform<hadutils::PCLVelodyne>(lid2cam, line_cloud);
    pcl::PointCloud<pcl::PointXYZ>::Ptr t_line_cloud = toPointsXYZ(line_cloud);
    show_t_img = project<pcl::PointXYZ>(camera_projection_matrix, t_line_cloud, rgb_idt_img, 0, 0, 0);

    if(show_project){
        cv::namedWindow("updated_t_cloud", cv::WINDOW_NORMAL);
        cv::imshow("updated_t_cloud", show_t_img);
        cv::waitKey(0);
    }
    cv::imwrite("updated_t_cloud.png", show_t_img);


    return 0;
}


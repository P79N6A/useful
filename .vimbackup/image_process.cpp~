/***************************************************************************
 *
 * Copyright (c) 2018 Alibaba-inc.com, Inc. All Rights Reserved
 * $Id$
 *
 **************************************************************************/

 /**
 * @file image_process.cpp
 * @author Weijian Sun(weijian.swj@alibaba-inc.com)
 * @author lifangzhen(fangzhen.lfz@alibaba-inc.com)
 *
 **/

#include "lidar_cam_calib/image_process.h"

#include <thread>
#include <iostream>
#include <unordered_map>
#include <vector>
#include <unistd.h>
#include <chrono>
#include <glog/logging.h>


namespace calib {

bool ImageProcess::Init(const calib::LidarCameraCalibParam & calib_param){
    calib_param_ = calib_param;
    param_a_ = 1.f / 3.f;
    param_r_ = 0.98f;
    std::string cam_model_file = calib_param.common_param().camera_model_file();

    // while (!lcm_.good()) {
    //     sleep(1);
    //     LOG_FIRST_N(INFO, 5) << "Waiting for LCM connection...";
    // }
    // LOG(INFO) << "connected to LCM server, channel_name: " << channel_name_;

    /// init camera model
    camera_.readFromXMLFile(cam_model_file);
    // detector_.setDictionary("ARUCO_MIP_36h12");

    /// init subscriber
    // lcm::Subscription *subscriber = lcm_.subscribe(
    //     channel_name_,
    //     &ImageProcess::image_callback,
    //     this);
    // subscriber->setQueueCapacity(1);
    //
    // std::thread th([&] { while (lcm_.handle() == 0) {} });
    // th.detach();
}


cv::Mat ImageProcess::get_camera_projection_matrix() {
    cv::Mat projMat = cv::getOptimalNewCameraMatrix(camera_.CameraMatrix, camera_.Distorsion, cv::Size(1600, 900), 0.);
    cv::Mat projMat1 = cv::Mat::zeros(3, 4, CV_32F);
    for (size_t i = 0; i < 3; i++) {
        for (size_t j = 0; j < 3; j++) {
            projMat1.at<float>(i, j) = projMat.at<float>(i, j);
        }
    }

    return projMat1;
}




bool ImageProcess::edge_filter(const cv::Mat& img, cv::Mat* out_img) {
    cv::Mat edge_img(img.rows, img.cols, CV_8UC1);

    // Cv::Mat kernel = (cv::Mat_<float>(3, 3) << 0, -1, 0, 0, 5, 0, 0, -1, 0);
    // Cv::filter2D(img, img, CV_8UC3, kernel);

    // cv::Mat temp;
    // cv::GaussianBlur(img, temp, cv::Size(3,3), 0, 0);
    // int r=3;
    // cv::Mat diff = img + r * (img - temp);

    if (!this->compute_edge(img, &edge_img)) {
        return false;
    }

    if (!this->inverse_distance_transform(edge_img, out_img)) {
        return false;
    }

    for(int i = 0; i < 10; i++)
    for(int j = 0; j < img.rows; j++)
    out_img->at<uchar>(j, i) =  static_cast<uchar>(0);

    for(int i = 0; i < 10; i++)
    for(int j = 0; j < img.rows; j++)
    out_img->at<uchar>(j, img.cols - 1 - i) =  static_cast<uchar>(0);


    for(int i = 0; i < img.cols; i++)
    for(int j = 0; j < 10; j++)
    out_img->at<uchar>(j, i) = static_cast<uchar>(0);

    for(int i = 0; i<img.cols; i++)
    for(int j = 0; j<10; j++)
    out_img->at<uchar>(img.rows - 1 -j, i) =  static_cast<uchar>(0);

    return true;
}




bool ImageProcess::compute_edge(const cv::Mat& img, cv::Mat* edge_img) {
    if (edge_img == NULL || edge_img->rows != img.rows || edge_img->cols != img.cols) {
        return false;
    }

    int row = img.rows;
    int col = img.cols;

    cv::Mat gray_img = cv::Mat(row, col, CV_8UC1);

    if (img.channels() == 1) {
        gray_img = img;
    } else {
        cv::cvtColor(img, gray_img, CV_BGR2GRAY);
    }

    int neighbor = 1;
    for (int r = 0; r < row; ++r) {
        for (int c = 0; c < col; ++c) {

            int max_diff = 0;
            for (int i = -neighbor; i <= neighbor; ++i) {
                for (int j = -neighbor; j <= neighbor; ++j) {
                    int new_r = r + i;
                    int new_c = c + j;
                    if (new_r >= 0 && new_r < row && new_c >= 0 && new_c < col) {
                        int diff = gray_img.at<uchar>(r, c) -
                                   gray_img.at<uchar>(new_r, new_c);
                        max_diff = std::max(max_diff, std::abs(diff));
                    }
                }
            }
            (*edge_img).at<uchar>(r, c) = max_diff;
        }
    }

    return true;
}

bool ImageProcess::inverse_distance_transform(const cv::Mat& img, cv::Mat* idt_img) {
    if (idt_img == NULL || idt_img->rows != img.rows || idt_img->cols != img.cols) {
        return false;
    }

    int row = img.rows;
    int col = img.cols;

    int neighbor = 2;
    for (int r = 0; r < row; ++r) {
        for (int c = 0; c < col; ++c) {

            int max_neighbor = 0;
            int max_r;
            int max_c;
            for (int i = -neighbor; i <= neighbor; ++i) {
                for (int j = -neighbor; j <= neighbor; ++j) {
                    int new_r = r + i;
                    int new_c = c + j;
                    if (new_r >= 0 && new_r < row && new_c >= 0 && new_c < col) {
                        if (max_neighbor < img.at<uchar>(new_r, new_c)) {
                            max_neighbor = img.at<uchar>(new_r, new_c);
                            max_r = new_r;
                            max_c = new_c;
                        }
                    }
                }
            }
            float drc = param_a_ * static_cast<float>(img.at<uchar>(r, c)) +
                        (1 - param_a_) * static_cast<float>(max_neighbor) *
                        std::pow(param_r_, std::max(std::abs(max_r - r), std::abs(max_c - c)));

            idt_img->at<uchar>(r, c) = static_cast<uchar>(drc);
        }
    }
    return true;
}


} // namespace calib

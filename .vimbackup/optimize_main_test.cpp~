/***************************************************************************
 *
 * Copyright (c) 2018 Alibaba-inc.com, Inc. All Rights Reserved
 * $Id$
 *
 **************************************************************************/

 /**
 * @file calib_main.cpp
 * @author lifangzhen(fangzhen.lfz@alibaba-inc.com)
 * @date 2018/07/01 20:32:14
 * @version $Revision$
 * @brief
 *
 **/

// #include <iostream>
// #include <sstream>
// #include <fstream>
// #include <Eigen/Eigen>
// #include <Eigen/LU>
// #include <google/protobuf/text_format.h>
// #include <google/protobuf/io/zero_copy_stream_impl.h>
//
// #include <pcl/io/pcd_io.h>
//
// #include "lidar_cam_calib/proto/calib_param.pb.h"
// #include "lidar_cam_calib/point_cloud_process.h"
// #include "lidar_cam_calib/image_process.h"
// #include "lidar_cam_calib/corners.h"
// #include "lidar_cam_calib/find_rt.h"
// #include "lidar_cam_calib/utils.h"
// #include "common/common.h"


#include <iostream>
#include <sstream>
#include <fstream>
#include <Eigen/Eigen>
#include <Eigen/LU>
#include <google/protobuf/text_format.h>
#include <google/protobuf/io/zero_copy_stream_impl.h>
#include <nlopt.hpp>

#include <utilities/pcl_point_types.h>
#include <lcmtypes/had/image_t.hpp>
#include <utilities/image/ImageDecoder.h>
#include <pcl/io/pcd_io.h>

#include "perception/cam_lidar_calib/proto/calib_param.pb.h"
#include "perception/cam_lidar_calib/3d_3d_calib/point_cloud_process.h"
#include "perception/cam_lidar_calib/3d_3d_calib/image_process.h"
#include "perception/cam_lidar_calib/3d_3d_calib/corners.h"
#include "perception/cam_lidar_calib/3d_3d_calib/find_rt.h"
#include "perception/cam_lidar_calib/3d_3d_calib/utils.h"
#include "perception/common/common.h"

#include "perception/common/common.h"


#define USING_OPENMP

using hadutils::PCLVelodyne;

void load_text_proto_message_file(const std::string& path,
                                  google::protobuf::Message& msg) {
    int fd = open(path.c_str(), O_RDONLY);
    PCHECK(fd >= 0) << "path[" << path << "]";
    google::protobuf::io::FileInputStream file_in(fd);
    CHECK(google::protobuf::TextFormat::Parse(&file_in, &msg)) << "path[" << path << "]";
    PCHECK(0 == close(fd));
}

//------------- point cloud utils ---------------//
pcl::PointCloud<pcl::PointXYZ>::Ptr toPointsXYZ(const pcl::PointCloud<hadutils::PCLVelodyne>::Ptr cloud) {
    pcl::PointCloud<pcl::PointXYZ>::Ptr new_cloud(new pcl::PointCloud<pcl::PointXYZ>());
    for (auto pt = cloud->points.begin(); pt < cloud->points.end(); pt++) {
        new_cloud->push_back(pcl::PointXYZ(pt->x, pt->y, pt->z));
    }
    return new_cloud;
}


int main(int argc, char** argv) {

    std::string params_file = argv[1];
    std::cout << "params_file: " << params_file << std::endl;

    calib::LidarCameraCalibParam lidar_camera_calib_param;
    load_text_proto_message_file(params_file, lidar_camera_calib_param);
    if (!lidar_camera_calib_param.has_threed_threed_calib_params()) {
        return 1;
    }

    auto calib_param = lidar_camera_calib_param.threed_threed_calib_params();

    float init_x_rot = 90;//calib_param.initial_pitch();
    float init_y_rot = 0;//calib_param.initial_roll();
    float init_z_rot = 90;//calib_param.initial_yaw();
    float init_x_tran = 0;//calib_param.initial_x();
    float init_y_tran = 0;//calib_param.initial_y();
    float init_z_tran = 0;//calib_param.initial_z();
    float x_rot_range = 15;//calib_param.search_pi();
    float y_rot_range = 15;//calib_param.search_ro();
    float z_rot_range = 15;//calib_param.search_ya();
    float x_tran_range = 1;//calib_param.search_x();
    float y_tran_range = 1;//calib_param.search_y();
    float z_tran_range = 1;//calib_param.search_z();
    float rot_step = 1;//calib_param.step_r();
    float tran_step = 0.1;//calib_param.step_t();
    std::string pcd_file = "./1535611652099862.pcd";//calib_param.data_prefix() + calib_param.pcd_line_file_path();
    std::string img_file = "./1535611653989485.png";//calib_param.data_prefix() + calib_param.img_file_path();
    std::cout<<"pcd_file path:  "<<pcd_file<<std::endl;
    std::cout<<"img file path:  "<<img_file<<std::endl;



    PERF_BLOCK_START();

    Eigen::Quaterniond qlidarToCamera;
    qlidarToCamera = Eigen::AngleAxisd(init_x_rot * M_PI / 180., Eigen::Vector3d::UnitX()) *
                     Eigen::AngleAxisd(init_y_rot * M_PI / 180., Eigen::Vector3d::UnitY()) *
                     Eigen::AngleAxisd(init_z_rot * M_PI / 180., Eigen::Vector3d::UnitZ());

    Eigen::Matrix3d inital_lidarToCamera = qlidarToCamera.matrix();
    Eigen::Matrix4d inital_lidarToCamera_transmatrix = Eigen::Matrix4d::Identity();
    inital_lidarToCamera_transmatrix.topLeftCorner(3, 3) = inital_lidarToCamera;
    inital_lidarToCamera_transmatrix(0, 3) = init_x_tran;
    inital_lidarToCamera_transmatrix(1, 3) = init_y_tran;
    inital_lidarToCamera_transmatrix(2, 3) = init_z_tran;

    Eigen::Matrix4d lid2cam = inital_lidarToCamera_transmatrix; //.inverse();

    PERF_BLOCK_END("calib_test");

    std::cout << "inital_lidarToCamera_transmatrix = " <<std::endl;
    std::cout << inital_lidarToCamera_transmatrix << std::endl;


    calib::PointCloudProcess point_cloud_process;
    point_cloud_process.init(calib_param);

    calib::ImageProcess image_process;
    image_process.init(calib_param);

//// load pcl
    pcl::PointCloud<PCLVelodyne>::Ptr cloud(new pcl::PointCloud<PCLVelodyne>);
    pcl::PointCloud<PCLVelodyne>::Ptr ori_cloud(new pcl::PointCloud<PCLVelodyne>);
    pcl::io::loadPCDFile(pcd_file, *cloud);
    pcl::copyPointCloud(*cloud, *ori_cloud);


//// load image
    cv::Mat img = cv::imread(img_file);
    cv::Mat idt_img = cv::Mat(img.size(), CV_8UC1);
    image_process.edge_filter(img, &idt_img);
    std::vector<cv::Mat> rgb_idt_channels;
    rgb_idt_channels.push_back(cv::Mat::zeros(idt_img.size(), CV_8UC1));
    rgb_idt_channels.push_back(cv::Mat::zeros(idt_img.size(), CV_8UC1));
    rgb_idt_channels.push_back(idt_img);
    cv::Mat rgb_idt_img;
    cv::merge(rgb_idt_channels, rgb_idt_img);

//// load camera matrix
    cv::Mat camera_projection_matrix = image_process.get_camera_projection_matrix();

//// project point cloud
    transform<hadutils::PCLVelodyne>(lid2cam, ori_cloud);
    pcl::PointCloud<pcl::PointXYZ>::Ptr ori_t_cloud = toPointsXYZ(ori_cloud);
    cv::Mat show_ori_t_img = project<pcl::PointXYZ>(camera_projection_matrix, ori_t_cloud, rgb_idt_img, 0, 0, 0);

//// show init projection
    std::cout<<"&&&&&&&&&&&&&&&&&&&&&&&&&&&"<<std::endl;
    cv::namedWindow("init_position", cv::WINDOW_NORMAL);
    cv::imshow("init_position", show_ori_t_img);
    cv::waitKey(0);

    // cv::imwrite("init_position", show_ori_t_img);



//// init cuda xyz_rot_trans
    Eigen::Matrix3d init_rot = lid2cam.topLeftCorner(3, 3);
    Eigen::Vector3d init_xyz_rot= init_rot.eulerAngles(0, 1, 2);
    Eigen::Vector3d init_xyz_tran = lid2cam.col(3).head(3);
    float init_xyz_rot_trans[6] = {init_xyz_rot(0) / M_PI * 180.0, init_xyz_rot(1) / M_PI * 180.0, init_xyz_rot(2) / M_PI * 180.0, init_xyz_tran(0), init_xyz_tran(1), init_xyz_tran(2)};

    printf("init_xyz_rot_trans: %f, %f, %f, %f, %f, %f\n", init_xyz_rot_trans[0], init_xyz_rot_trans[1], init_xyz_rot_trans[2], init_xyz_rot_trans[3], init_xyz_rot_trans[4], init_xyz_rot_trans[5]);

//// init cuda img data
    std::vector<unsigned char> img_data;
    int width = idt_img.cols;
    int height = idt_img.rows;
    img_data.resize(height * width);
    for (int r = 0; r < height; ++r) {
        for (int c = 0; c < width; ++c) {
            img_data[r * width + c] = idt_img.at<unsigned char>(r, c);
        }
    }

//// init cuda pcd data
    std::vector<float> pc_data;
    int nr_pc = cloud->size();
    std::cout << "out_nr_pc: " << nr_pc << '\n';
    pc_data.resize(nr_pc * 3);
    for (size_t i = 0; i < nr_pc; ++i) {
        pc_data[i * 3] = cloud->points[i].x;
        pc_data[i * 3 + 1] = cloud->points[i].y;
        pc_data[i * 3 + 2] = cloud->points[i].z;
    }

//// init cuda cam proj mat
    float pm[9] = {camera_projection_matrix.at<float>(0, 0), camera_projection_matrix.at<float>(0, 1),
                   camera_projection_matrix.at<float>(0, 2), camera_projection_matrix.at<float>(1, 0),
                   camera_projection_matrix.at<float>(1, 1), camera_projection_matrix.at<float>(1, 2),
                   camera_projection_matrix.at<float>(2, 0), camera_projection_matrix.at<float>(2, 1),
                   camera_projection_matrix.at<float>(2, 2)};

    printf("cam_pm: %f, %f, %f, %f, %f, %f, %f, %f, %f\n", pm[0], pm[1], pm[2], pm[3], pm[4], pm[5], pm[6], pm[7], pm[8]);

//// init cuda search range data
    float search_xyz_rot_trans[6] = {x_rot_range,
                                     y_rot_range,
                                     z_rot_range,
                                     x_tran_range,
                                     y_tran_range,
                                     z_tran_range};
    printf("search_xyz_rot_trans: %f, %f, %f, %f, %f, %f\n", search_xyz_rot_trans[0], search_xyz_rot_trans[1],
                        search_xyz_rot_trans[2], search_xyz_rot_trans[3], search_xyz_rot_trans[4], search_xyz_rot_trans[5]);

//// init cuda search step data
    float step_rt[2] = {rot_step,
                        tran_step};
    printf("step_rt: %f, %f\n", step_rt[0], step_rt[1]);

//// init placeholder for best xyz_rot_trans
    float best_xyz_rot_trans[6];

//// apply cuda search
    PERF_BLOCK_END("calib_data_process");
    greed_search_cu(img_data.data(), width, height, pc_data.data(), nr_pc, pm, init_xyz_rot_trans,
            search_xyz_rot_trans, step_rt, best_xyz_rot_trans);
//    greed_search_of_trans<PCLVelodyne>(idt_img, cloud, camera_projection_matrix, &lid2cam);


////check weight count
    double xyz_rot[3] = {best_xyz_rot_trans[0], best_xyz_rot_trans[1], best_xyz_rot_trans[2]};
    double xyz_trans[3] = {best_xyz_rot_trans[3], best_xyz_rot_trans[4], best_xyz_rot_trans[5]};

    int temp_count = edge_weight_count<PCLVelodyne>(idt_img, cloud, camera_projection_matrix, xyz_rot, xyz_trans);
    std::cout<<std::endl;
    std::cout<<"*************************"<<std::endl;
    std::cout<<"final weight_count: "<<temp_count<<std::endl;


    PERF_BLOCK_END("calib_greed_search");

    std::cout << "refined rot:   " << best_xyz_rot_trans[0] * 180. / M_PI << ", "
                                 << best_xyz_rot_trans[1] * 180. / M_PI << ", "
                                 << best_xyz_rot_trans[2] * 180. / M_PI << std::endl;
    std::cout << "refined trans: " << best_xyz_rot_trans[3] << ", " << best_xyz_rot_trans[4] << ", " << best_xyz_rot_trans[5] << std::endl;



    Eigen::Quaterniond q;
    q = Eigen::AngleAxisd(best_xyz_rot_trans[0], Eigen::Vector3d::UnitX()) *
        Eigen::AngleAxisd(best_xyz_rot_trans[1], Eigen::Vector3d::UnitY()) *
        Eigen::AngleAxisd(best_xyz_rot_trans[2], Eigen::Vector3d::UnitZ());
    lid2cam.topLeftCorner(3, 3) = q.matrix();
    lid2cam(0, 3) = best_xyz_rot_trans[3];
    lid2cam(1, 3) = best_xyz_rot_trans[4];
    lid2cam(2, 3) = best_xyz_rot_trans[5];


    std::cout<<"final lid2cam: "<<std::endl;
    std::cout<<lid2cam<<std::endl;

    transform<hadutils::PCLVelodyne>(lid2cam, cloud);
    pcl::PointCloud<pcl::PointXYZ>::Ptr t_cloud = toPointsXYZ(cloud);
    cv::Mat show_t_img = project<pcl::PointXYZ>(camera_projection_matrix, t_cloud, rgb_idt_img, 0, 0, 0);


    cv::namedWindow("t_cloud", cv::WINDOW_NORMAL);
    cv::imshow("t_cloud", show_t_img);
    // cv::imwrite("t_cloud.png", show_t_img);

    cv::namedWindow("ori_t_cloud", cv::WINDOW_NORMAL);
    cv::imshow("ori_t_cloud", show_ori_t_img);
    // cv::imwrite("t_ori_cloud.png", show_ori_t_img);

    cv::waitKey(0);


    return 0;
}

